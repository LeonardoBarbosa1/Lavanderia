declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            handleDiameter: string;
            handleDistance: string;
            handleColor: string;
            handleBorderRadius: string;
            trackColor: string;
            trackWidth: string;
            trackHeight: string;
            trackActiveColor: string;
            trackBorderWidth: string;
            trackBorderRadius: string;
            isActive: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            handleDiameter: {
                type: StringConstructor;
                default: string;
            };
            handleDistance: {
                type: StringConstructor;
                default: string;
            };
            handleColor: {
                type: StringConstructor;
                default: string;
            };
            handleBorderRadius: {
                type: StringConstructor;
                default: string;
            };
            trackColor: {
                type: StringConstructor;
                default: string;
            };
            trackWidth: {
                type: StringConstructor;
                default: string;
            };
            trackHeight: {
                type: StringConstructor;
                default: string;
            };
            trackActiveColor: {
                type: StringConstructor;
                default: string;
            };
            trackBorderWidth: {
                type: StringConstructor;
                default: string;
            };
            trackBorderRadius: {
                type: StringConstructor;
                default: string;
            };
            isActive: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
            "onOn-change"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "handleDiameter" | "handleDistance" | "handleColor" | "handleBorderRadius" | "trackColor" | "trackWidth" | "trackHeight" | "trackActiveColor" | "trackBorderWidth" | "trackBorderRadius" | "isActive">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:isActive" | "on-change", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            handleDiameter: {
                type: StringConstructor;
                default: string;
            };
            handleDistance: {
                type: StringConstructor;
                default: string;
            };
            handleColor: {
                type: StringConstructor;
                default: string;
            };
            handleBorderRadius: {
                type: StringConstructor;
                default: string;
            };
            trackColor: {
                type: StringConstructor;
                default: string;
            };
            trackWidth: {
                type: StringConstructor;
                default: string;
            };
            trackHeight: {
                type: StringConstructor;
                default: string;
            };
            trackActiveColor: {
                type: StringConstructor;
                default: string;
            };
            trackBorderWidth: {
                type: StringConstructor;
                default: string;
            };
            trackBorderRadius: {
                type: StringConstructor;
                default: string;
            };
            isActive: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
            "onOn-change"?: ((...args: any[]) => any) | undefined;
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:isActive" | "on-change")[], string, {
            handleDiameter: string;
            handleDistance: string;
            handleColor: string;
            handleBorderRadius: string;
            trackColor: string;
            trackWidth: string;
            trackHeight: string;
            trackActiveColor: string;
            trackBorderWidth: string;
            trackBorderRadius: string;
            isActive: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        handleDiameter: {
            type: StringConstructor;
            default: string;
        };
        handleDistance: {
            type: StringConstructor;
            default: string;
        };
        handleColor: {
            type: StringConstructor;
            default: string;
        };
        handleBorderRadius: {
            type: StringConstructor;
            default: string;
        };
        trackColor: {
            type: StringConstructor;
            default: string;
        };
        trackWidth: {
            type: StringConstructor;
            default: string;
        };
        trackHeight: {
            type: StringConstructor;
            default: string;
        };
        trackActiveColor: {
            type: StringConstructor;
            default: string;
        };
        trackBorderWidth: {
            type: StringConstructor;
            default: string;
        };
        trackBorderRadius: {
            type: StringConstructor;
            default: string;
        };
        isActive: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
        "onOn-change"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    handleDiameter: {
        type: StringConstructor;
        default: string;
    };
    handleDistance: {
        type: StringConstructor;
        default: string;
    };
    handleColor: {
        type: StringConstructor;
        default: string;
    };
    handleBorderRadius: {
        type: StringConstructor;
        default: string;
    };
    trackColor: {
        type: StringConstructor;
        default: string;
    };
    trackWidth: {
        type: StringConstructor;
        default: string;
    };
    trackHeight: {
        type: StringConstructor;
        default: string;
    };
    trackActiveColor: {
        type: StringConstructor;
        default: string;
    };
    trackBorderWidth: {
        type: StringConstructor;
        default: string;
    };
    trackBorderRadius: {
        type: StringConstructor;
        default: string;
    };
    isActive: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onOn-change"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:isActive" | "on-change")[], "update:isActive" | "on-change", {
    handleDiameter: string;
    handleDistance: string;
    handleColor: string;
    handleBorderRadius: string;
    trackColor: string;
    trackWidth: string;
    trackHeight: string;
    trackActiveColor: string;
    trackBorderWidth: string;
    trackBorderRadius: string;
    isActive: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {};
});
export default _default;
